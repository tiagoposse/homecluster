apiVersion: v1
kind: Pod
metadata:
  name: monorepo-placeholder
  namespace: drone
  labels:
    app.kubernetes.io/name: monorepo-placeholder
spec:
  containers:
    - image: python:3.7-alpine
      name: repo-placeholder
      command: ['python']
      args: ['/app/app.py']
      env:
        - name: PYTHONBUFFERED
          value: "1"
      volumeMounts:
        - name: exec
          mountPath: /app
      ports:
        - name: http
          containerPort: 3000
          protocol: TCP
  volumes:
    - name: exec
      configMap:
        name: monorepo-placeholder
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monorepo-placeholder
  namespace: drone
data:
  app.py: |
    #!/usr/bin/env python3

    from http.server import BaseHTTPRequestHandler, HTTPServer
    import logging, json

    class Server(BaseHTTPRequestHandler):
      def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)

        data = json.loads(post_data.decode('utf-8'))

        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({ "data": data['config']['data'] }).encode())

    if __name__ == '__main__':
      logging.basicConfig(level=logging.INFO)
      server_address = ('', 3000)
      httpd = HTTPServer(server_address, Server)
      logging.info('Starting httpd...\n')
      try:
          httpd.serve_forever()
      except KeyboardInterrupt:
          pass
      httpd.server_close()
      logging.info('Stopping httpd...\n')
---
apiVersion: v1
kind: Service
metadata:
  name: drone-monorepo
  namespace: drone
spec:
  ports:
    - port: 3000
      targetPort: http
  selector:
    app.kubernetes.io/name: monorepo-placeholder